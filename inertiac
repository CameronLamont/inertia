#!/usr/bin/env node
module.exports = (function(){
  /*
   * Generated by PEG.js 0.7.0.
   *
   * http://pegjs.majda.cz/
   */
  
  function quote(s) {
    /*
     * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a
     * string literal except for the closing quote character, backslash,
     * carriage return, line separator, paragraph separator, and line feed.
     * Any character may appear in the form of an escape sequence.
     *
     * For portability, we also escape escape all control and non-ASCII
     * characters. Note that "\0" and "\v" escape sequences are not used
     * because JSHint does not like the first and IE the second.
     */
     return '"' + s
      .replace(/\\/g, '\\\\')  // backslash
      .replace(/"/g, '\\"')    // closing quote character
      .replace(/\x08/g, '\\b') // backspace
      .replace(/\t/g, '\\t')   // horizontal tab
      .replace(/\n/g, '\\n')   // line feed
      .replace(/\f/g, '\\f')   // form feed
      .replace(/\r/g, '\\r')   // carriage return
      .replace(/[\x00-\x07\x0B\x0E-\x1F\x80-\uFFFF]/g, escape)
      + '"';
  }
  
  var result = {
    /*
     * Parses the input with a generated parser. If the parsing is successfull,
     * returns a value explicitly or implicitly specified by the grammar from
     * which the parser was generated (see |PEG.buildParser|). If the parsing is
     * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.
     */
    parse: function(input, startRule) {
      var parseFunctions = {
        "program": parse_program,
        "sexp": parse_sexp,
        "atom": parse_atom,
        "sourcechar": parse_sourcechar,
        "list": parse_list,
        "vector": parse_vector,
        "object": parse_object,
        "comment": parse_comment,
        "__": parse___,
        "_": parse__
      };
      
      if (startRule !== undefined) {
        if (parseFunctions[startRule] === undefined) {
          throw new Error("Invalid rule name: " + quote(startRule) + ".");
        }
      } else {
        startRule = "program";
      }
      
      var pos = 0;
      var reportFailures = 0;
      var rightmostFailuresPos = 0;
      var rightmostFailuresExpected = [];
      
      function padLeft(input, padding, length) {
        var result = input;
        
        var padLength = length - input.length;
        for (var i = 0; i < padLength; i++) {
          result = padding + result;
        }
        
        return result;
      }
      
      function escape(ch) {
        var charCode = ch.charCodeAt(0);
        var escapeChar;
        var length;
        
        if (charCode <= 0xFF) {
          escapeChar = 'x';
          length = 2;
        } else {
          escapeChar = 'u';
          length = 4;
        }
        
        return '\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);
      }
      
      function matchFailed(failure) {
        if (pos < rightmostFailuresPos) {
          return;
        }
        
        if (pos > rightmostFailuresPos) {
          rightmostFailuresPos = pos;
          rightmostFailuresExpected = [];
        }
        
        rightmostFailuresExpected.push(failure);
      }
      
      function parse_program() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse__();
        if (result0 !== null) {
          result2 = parse_sexp();
          if (result2 !== null) {
            result1 = [];
            while (result2 !== null) {
              result1.push(result2);
              result2 = parse_sexp();
            }
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            result2 = [];
            if (input.charCodeAt(pos) === 10) {
              result3 = "\n";
              pos++;
            } else {
              result3 = null;
              if (reportFailures === 0) {
                matchFailed("\"\\n\"");
              }
            }
            while (result3 !== null) {
              result2.push(result3);
              if (input.charCodeAt(pos) === 10) {
                result3 = "\n";
                pos++;
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("\"\\n\"");
                }
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, s) { return {
              type: 'Program',
              body: s
            };})(pos0, result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_sexp() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse__();
        if (result0 !== null) {
          result1 = parse_atom();
          if (result1 !== null) {
            result2 = parse__();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, a) { return a; })(pos0, result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          pos0 = pos;
          pos1 = pos;
          result0 = parse__();
          if (result0 !== null) {
            result1 = parse_list();
            if (result1 !== null) {
              result2 = parse__();
              if (result2 !== null) {
                result0 = [result0, result1, result2];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
          if (result0 !== null) {
            result0 = (function(offset, l) { return l; })(pos0, result0[1]);
          }
          if (result0 === null) {
            pos = pos0;
          }
          if (result0 === null) {
            pos0 = pos;
            pos1 = pos;
            result0 = parse__();
            if (result0 !== null) {
              result1 = parse_vector();
              if (result1 !== null) {
                result2 = parse__();
                if (result2 !== null) {
                  result0 = [result0, result1, result2];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
            if (result0 !== null) {
              result0 = (function(offset, v) { return v; })(pos0, result0[1]);
            }
            if (result0 === null) {
              pos = pos0;
            }
            if (result0 === null) {
              pos0 = pos;
              pos1 = pos;
              result0 = parse__();
              if (result0 !== null) {
                result1 = parse_object();
                if (result1 !== null) {
                  result2 = parse__();
                  if (result2 !== null) {
                    result0 = [result0, result1, result2];
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
              if (result0 !== null) {
                result0 = (function(offset, o) { return o; })(pos0, result0[1]);
              }
              if (result0 === null) {
                pos = pos0;
              }
            }
          }
        }
        return result0;
      }
      
      function parse_atom() {
        var result0, result1, result2, result3;
        var pos0, pos1, pos2, pos3;
        
        pos0 = pos;
        pos1 = pos;
        if (/^[0-9]/.test(input.charAt(pos))) {
          result1 = input.charAt(pos);
          pos++;
        } else {
          result1 = null;
          if (reportFailures === 0) {
            matchFailed("[0-9]");
          }
        }
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            if (/^[0-9]/.test(input.charAt(pos))) {
              result1 = input.charAt(pos);
              pos++;
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("[0-9]");
              }
            }
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result1 = parse__();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, d) { return {type: 'Literal', value: numberify(d)}; })(pos0, result0[0]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          pos0 = pos;
          pos1 = pos;
          if (input.charCodeAt(pos) === 34) {
            result0 = "\"";
            pos++;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"\\\"\"");
            }
          }
          if (result0 !== null) {
            result1 = [];
            pos2 = pos;
            pos3 = pos;
            reportFailures++;
            if (input.charCodeAt(pos) === 34) {
              result2 = "\"";
              pos++;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"\\\"\"");
              }
            }
            reportFailures--;
            if (result2 === null) {
              result2 = "";
            } else {
              result2 = null;
              pos = pos3;
            }
            if (result2 !== null) {
              result3 = parse_sourcechar();
              if (result3 !== null) {
                result2 = [result2, result3];
              } else {
                result2 = null;
                pos = pos2;
              }
            } else {
              result2 = null;
              pos = pos2;
            }
            while (result2 !== null) {
              result1.push(result2);
              pos2 = pos;
              pos3 = pos;
              reportFailures++;
              if (input.charCodeAt(pos) === 34) {
                result2 = "\"";
                pos++;
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("\"\\\"\"");
                }
              }
              reportFailures--;
              if (result2 === null) {
                result2 = "";
              } else {
                result2 = null;
                pos = pos3;
              }
              if (result2 !== null) {
                result3 = parse_sourcechar();
                if (result3 !== null) {
                  result2 = [result2, result3];
                } else {
                  result2 = null;
                  pos = pos2;
                }
              } else {
                result2 = null;
                pos = pos2;
              }
            }
            if (result1 !== null) {
              if (input.charCodeAt(pos) === 34) {
                result2 = "\"";
                pos++;
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("\"\\\"\"");
                }
              }
              if (result2 !== null) {
                result3 = parse__();
                if (result3 !== null) {
                  result0 = [result0, result1, result2, result3];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
          if (result0 !== null) {
            result0 = (function(offset, d) { return {type: 'Literal', value: makeStr(d) }})(pos0, result0[1]);
          }
          if (result0 === null) {
            pos = pos0;
          }
          if (result0 === null) {
            pos0 = pos;
            pos1 = pos;
            if (/^[\-+\/*_<>=a-zA-Z.!]/.test(input.charAt(pos))) {
              result1 = input.charAt(pos);
              pos++;
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("[\\-+\\/*_<>=a-zA-Z.!]");
              }
            }
            if (result1 !== null) {
              result0 = [];
              while (result1 !== null) {
                result0.push(result1);
                if (/^[\-+\/*_<>=a-zA-Z.!]/.test(input.charAt(pos))) {
                  result1 = input.charAt(pos);
                  pos++;
                } else {
                  result1 = null;
                  if (reportFailures === 0) {
                    matchFailed("[\\-+\\/*_<>=a-zA-Z.!]");
                  }
                }
              }
            } else {
              result0 = null;
            }
            if (result0 !== null) {
              result1 = parse__();
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
            if (result0 !== null) {
              result0 = (function(offset, s) { return {type: 'Identifier', name: s.join("")};})(pos0, result0[0]);
            }
            if (result0 === null) {
              pos = pos0;
            }
          }
        }
        return result0;
      }
      
      function parse_sourcechar() {
        var result0;
        
        if (input.length > pos) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("any character");
          }
        }
        return result0;
      }
      
      function parse_list() {
        var result0, result1, result2, result3, result4, result5, result6;
        var pos0, pos1;
        
        pos0 = pos;
        if (input.substr(pos, 2) === "()") {
          result0 = "()";
          pos += 2;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"()\"");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset) { return []; })(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          pos0 = pos;
          pos1 = pos;
          result0 = parse__();
          if (result0 !== null) {
            if (input.charCodeAt(pos) === 40) {
              result1 = "(";
              pos++;
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("\"(\"");
              }
            }
            if (result1 !== null) {
              result2 = parse__();
              if (result2 !== null) {
                result4 = parse_sexp();
                if (result4 !== null) {
                  result3 = [];
                  while (result4 !== null) {
                    result3.push(result4);
                    result4 = parse_sexp();
                  }
                } else {
                  result3 = null;
                }
                if (result3 !== null) {
                  result4 = parse__();
                  if (result4 !== null) {
                    if (input.charCodeAt(pos) === 41) {
                      result5 = ")";
                      pos++;
                    } else {
                      result5 = null;
                      if (reportFailures === 0) {
                        matchFailed("\")\"");
                      }
                    }
                    if (result5 !== null) {
                      result6 = parse__();
                      if (result6 !== null) {
                        result0 = [result0, result1, result2, result3, result4, result5, result6];
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
          if (result0 !== null) {
            result0 = (function(offset, s) {
              if (first(s).name === 'def') {
                return {
                  type: 'VariableDeclaration',
                  declarations: [{
                    type: 'VariableDeclarator',
                    id: s[1],
                    init: s[2].expression? s[2].expression : s[2]
                  }],
                  kind: 'var'
                };
              }
          
              if (first(s).name === 'fn') {
                return {
                  type: 'FunctionExpression',
                  id: null,
                  params: s[1].elements ? s[1].elements : s[1],
                  body: {
                    type: 'BlockStatement',
                    body: init(rest(rest((s)))).concat(returnStatement(last(rest(s))))
                  }
                };
              }
          
              if (Object.keys(builtins).indexOf(first(s).name) > -1) {
                return builtins[first(s).name](rest(s));
              }
          
              return processCallExpression(s);
          
            })(pos0, result0[3]);
          }
          if (result0 === null) {
            pos = pos0;
          }
        }
        return result0;
      }
      
      function parse_vector() {
        var result0, result1, result2, result3, result4, result5, result6;
        var pos0, pos1;
        
        pos0 = pos;
        if (input.substr(pos, 2) === "[]") {
          result0 = "[]";
          pos += 2;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"[]\"");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset) { return {type: 'ArrayExpression', elements: []};})(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          pos0 = pos;
          pos1 = pos;
          result0 = parse__();
          if (result0 !== null) {
            if (input.charCodeAt(pos) === 91) {
              result1 = "[";
              pos++;
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("\"[\"");
              }
            }
            if (result1 !== null) {
              result2 = parse__();
              if (result2 !== null) {
                result4 = parse_atom();
                if (result4 !== null) {
                  result3 = [];
                  while (result4 !== null) {
                    result3.push(result4);
                    result4 = parse_atom();
                  }
                } else {
                  result3 = null;
                }
                if (result3 !== null) {
                  result4 = parse__();
                  if (result4 !== null) {
                    if (input.charCodeAt(pos) === 93) {
                      result5 = "]";
                      pos++;
                    } else {
                      result5 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"]\"");
                      }
                    }
                    if (result5 !== null) {
                      result6 = parse__();
                      if (result6 !== null) {
                        result0 = [result0, result1, result2, result3, result4, result5, result6];
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
          if (result0 !== null) {
            result0 = (function(offset, a) { return {type: 'ArrayExpression', elements: a};})(pos0, result0[3]);
          }
          if (result0 === null) {
            pos = pos0;
          }
          if (result0 === null) {
            pos0 = pos;
            pos1 = pos;
            result0 = parse__();
            if (result0 !== null) {
              if (input.charCodeAt(pos) === 91) {
                result1 = "[";
                pos++;
              } else {
                result1 = null;
                if (reportFailures === 0) {
                  matchFailed("\"[\"");
                }
              }
              if (result1 !== null) {
                result2 = parse__();
                if (result2 !== null) {
                  result4 = parse_object();
                  if (result4 !== null) {
                    result3 = [];
                    while (result4 !== null) {
                      result3.push(result4);
                      result4 = parse_object();
                    }
                  } else {
                    result3 = null;
                  }
                  if (result3 !== null) {
                    result4 = parse__();
                    if (result4 !== null) {
                      if (input.charCodeAt(pos) === 93) {
                        result5 = "]";
                        pos++;
                      } else {
                        result5 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"]\"");
                        }
                      }
                      if (result5 !== null) {
                        result6 = parse__();
                        if (result6 !== null) {
                          result0 = [result0, result1, result2, result3, result4, result5, result6];
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
            if (result0 !== null) {
              result0 = (function(offset, o) { return {type: 'ArrayExpression', elements: o};})(pos0, result0[3]);
            }
            if (result0 === null) {
              pos = pos0;
            }
            if (result0 === null) {
              pos0 = pos;
              pos1 = pos;
              result0 = parse__();
              if (result0 !== null) {
                if (input.charCodeAt(pos) === 91) {
                  result1 = "[";
                  pos++;
                } else {
                  result1 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"[\"");
                  }
                }
                if (result1 !== null) {
                  result2 = parse__();
                  if (result2 !== null) {
                    result4 = parse_sexp();
                    if (result4 !== null) {
                      result3 = [];
                      while (result4 !== null) {
                        result3.push(result4);
                        result4 = parse_sexp();
                      }
                    } else {
                      result3 = null;
                    }
                    if (result3 !== null) {
                      result4 = parse__();
                      if (result4 !== null) {
                        if (input.charCodeAt(pos) === 93) {
                          result5 = "]";
                          pos++;
                        } else {
                          result5 = null;
                          if (reportFailures === 0) {
                            matchFailed("\"]\"");
                          }
                        }
                        if (result5 !== null) {
                          result6 = parse__();
                          if (result6 !== null) {
                            result0 = [result0, result1, result2, result3, result4, result5, result6];
                          } else {
                            result0 = null;
                            pos = pos1;
                          }
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
              if (result0 !== null) {
                result0 = (function(offset, s) { return {
                  type: 'ArrayExpression',
                  elements: map(liftExpression, s)};})(pos0, result0[3]);
              }
              if (result0 === null) {
                pos = pos0;
              }
            }
          }
        }
        return result0;
      }
      
      function parse_object() {
        var result0, result1, result2, result3, result4, result5, result6;
        var pos0, pos1;
        
        pos0 = pos;
        if (input.substr(pos, 2) === "{}") {
          result0 = "{}";
          pos += 2;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"{}\"");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset) { return {type: 'ObjectExpression', properties: []}; })(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          pos0 = pos;
          pos1 = pos;
          result0 = parse__();
          if (result0 !== null) {
            if (input.charCodeAt(pos) === 123) {
              result1 = "{";
              pos++;
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("\"{\"");
              }
            }
            if (result1 !== null) {
              result2 = parse__();
              if (result2 !== null) {
                result4 = parse_atom();
                if (result4 !== null) {
                  result3 = [];
                  while (result4 !== null) {
                    result3.push(result4);
                    result4 = parse_atom();
                  }
                } else {
                  result3 = null;
                }
                if (result3 !== null) {
                  result4 = parse__();
                  if (result4 !== null) {
                    if (input.charCodeAt(pos) === 125) {
                      result5 = "}";
                      pos++;
                    } else {
                      result5 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"}\"");
                      }
                    }
                    if (result5 !== null) {
                      result6 = parse__();
                      if (result6 !== null) {
                        result0 = [result0, result1, result2, result3, result4, result5, result6];
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
          if (result0 !== null) {
            result0 = (function(offset, a) { return makeObject(a); })(pos0, result0[3]);
          }
          if (result0 === null) {
            pos = pos0;
          }
        }
        return result0;
      }
      
      function parse_comment() {
        var result0, result1, result2, result3;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        if (input.substr(pos, 2) === ";;") {
          result0 = ";;";
          pos += 2;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\";;\"");
          }
        }
        if (result0 !== null) {
          result1 = [];
          pos1 = pos;
          pos2 = pos;
          reportFailures++;
          if (input.charCodeAt(pos) === 10) {
            result2 = "\n";
            pos++;
          } else {
            result2 = null;
            if (reportFailures === 0) {
              matchFailed("\"\\n\"");
            }
          }
          reportFailures--;
          if (result2 === null) {
            result2 = "";
          } else {
            result2 = null;
            pos = pos2;
          }
          if (result2 !== null) {
            result3 = parse_sourcechar();
            if (result3 !== null) {
              result2 = [result2, result3];
            } else {
              result2 = null;
              pos = pos1;
            }
          } else {
            result2 = null;
            pos = pos1;
          }
          while (result2 !== null) {
            result1.push(result2);
            pos1 = pos;
            pos2 = pos;
            reportFailures++;
            if (input.charCodeAt(pos) === 10) {
              result2 = "\n";
              pos++;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"\\n\"");
              }
            }
            reportFailures--;
            if (result2 === null) {
              result2 = "";
            } else {
              result2 = null;
              pos = pos2;
            }
            if (result2 !== null) {
              result3 = parse_sourcechar();
              if (result3 !== null) {
                result2 = [result2, result3];
              } else {
                result2 = null;
                pos = pos1;
              }
            } else {
              result2 = null;
              pos = pos1;
            }
          }
          if (result1 !== null) {
            if (input.charCodeAt(pos) === 10) {
              result2 = "\n";
              pos++;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"\\n\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse___() {
        var result0;
        
        if (/^[\n, ]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[\\n, ]");
          }
        }
        return result0;
      }
      
      function parse__() {
        var result0, result1;
        
        result0 = [];
        result1 = parse___();
        if (result1 === null) {
          result1 = parse_comment();
        }
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse___();
          if (result1 === null) {
            result1 = parse_comment();
          }
        }
        return result0;
      }
      
      
      function cleanupExpected(expected) {
        expected.sort();
        
        var lastExpected = null;
        var cleanExpected = [];
        for (var i = 0; i < expected.length; i++) {
          if (expected[i] !== lastExpected) {
            cleanExpected.push(expected[i]);
            lastExpected = expected[i];
          }
        }
        return cleanExpected;
      }
      
      function computeErrorPosition() {
        /*
         * The first idea was to use |String.split| to break the input up to the
         * error position along newlines and derive the line and column from
         * there. However IE's |split| implementation is so broken that it was
         * enough to prevent it.
         */
        
        var line = 1;
        var column = 1;
        var seenCR = false;
        
        for (var i = 0; i < Math.max(pos, rightmostFailuresPos); i++) {
          var ch = input.charAt(i);
          if (ch === "\n") {
            if (!seenCR) { line++; }
            column = 1;
            seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            line++;
            column = 1;
            seenCR = true;
          } else {
            column++;
            seenCR = false;
          }
        }
        
        return { line: line, column: column };
      }
      
      
      
        function partition(n, coll) {
            if (coll.length % n !== 0) {
                throw Error('Uneven number of elements.');
            }
      
            if (coll.length === 0) {
                return [];
            }
            return [coll.slice(0, n)].concat(partition(n, coll.slice(n)));
        }
      
        function makeObject(arr) {
          var pairs = partition(2, arr);
          var properties = map(function(p) {
            var k = p[0], v = p[1];
            return {
              key: k,
              value: v
            }
          }, pairs);
      
          return {
              type: 'ObjectExpression',
              properties: properties
          }
      
        }
      
        function processCallExpression(s) {
          var callee = first(s),
              args = rest(s)
      
          args = map(function(s) {
            if (s.expression && s.expression.type === 'CallExpression') {
              return s.expression;
            } else {
              return s;
            }
          }, args);
      
          return {
            type: 'ExpressionStatement',
            expression: {
              type: 'CallExpression',
              callee: callee,
              'arguments': args
            }
          }
      
        }
      
        function liftExpression(s) {
          if (s.type === 'ExpressionStatement') {
            return s.expression;
          } else {
            return s;
          }
        }
      
        function genericArithmeticOperation(operator) {
            return function(s) {
                if (s.length === 2) {
                    return {
                        type: 'BinaryExpression',
                        operator: operator,
                        left: first(s),
                        right: first(rest(s))
                    };
                }
      
                if (s.length === 1) {
                    return first(s);
                }
      
                return {
                    type: 'BinaryExpression',
                    operator: operator,
                    left: first(s),
                    right: genericArithmeticOperation(operator)(rest(s))
                };
            };
        }
      
        var builtins = {
          '+': genericArithmeticOperation('+'),
          '-': genericArithmeticOperation('-'),
          '*': genericArithmeticOperation('*'),
          '/': genericArithmeticOperation('/'),
          '=': genericArithmeticOperation('==='),
          '!=': genericArithmeticOperation('!=='),
          '>': genericArithmeticOperation('>'),
          '>=': genericArithmeticOperation('>='),
          '<': genericArithmeticOperation('<'),
          '<=': genericArithmeticOperation('<='),
          'list': function(s) {
            return {
              type: 'ArrayExpression',
              elements: s
            }
          },
          'if': function(s) {
            return {
              type: 'CallExpression',
              callee: {
                type: 'FunctionExpression',
                id: null,
                params: [],
                body: {
                  type: 'BlockStatement',
                  body: [{
                    type: 'IfStatement',
                    test: first(s).expression ? first(s).expression : first(s),
                    consequent: {
                      type: 'BlockStatement',
                      body: [{
                        type: 'ReturnStatement',
                        argument: s[1].expression ? s[1].expression : s[1]
                      }]
                    },
                    alternate: {
                      type: 'BlockStatement',
                      body: [{
                        type: 'ReturnStatement',
                        argument: s[2].expression ? s[2].expression : s[2]
                      }]
                    }
                  }]
                }
              },
              'arguments': []
            }
          },
          'let': function(s) {
            var args = partition(2, first(s).elements),
                exprs = rest(s),
                body = [];
      
            body.push({
              type: 'VariableDeclaration',
              declarations: map(makeDec, args),
              kind: 'var'});
      
            if (exprs.length > 1) {
              var initial = init(exprs);
              for (var i = 0; i < initial.length; i++ ) {
                body.push(initial[i]);
              }
            }
      
            body.push({
              type: 'ReturnStatement',
              argument: last(exprs)[0].expression
            });
      
      
            return {
              type: 'CallExpression',
              callee: {
                type: 'FunctionExpression',
                id: null,
                params: [],
                body: {
                  type: 'BlockStatement',
                  body: body
                }
              },
              'arguments': []
            };
          }
        };
      
        function makeDec(p) {
          var name = p[0], value = p[1];
      
          return {
            type: 'VariableDeclarator',
            id: name,
            init: value.expression ? value.expression : value
          };
        }
      
        function numberify(n) {
          return parseInt(n.join(""), 10);
        }
      
        function map(fn, arr) {
          var result = [];
          for (var i = 0; i < arr.length; i++) {
              result.push(fn(arr[i]));
          }
          return result;
        }
      
        function makeStr(n) {
          return map(function(i) {
            return i[1];
          }, n).join("");
        }
      
        function rest(a) {
          return a.slice(1);
        }
      
        function first(a) {
          if (a.length > 0) {
            return a[0];
          } else {
            return null;
          }
        }
      
        function init(a) {
          return a.slice(0, -1);
        }
      
        function last(a) {
          return a.slice(-1);
        }
      
        function returnStatement(s) {
          s = first(s);
          return [{
            type: 'ReturnStatement',
            argument: s.expression ? s.expression : s
          }];
        }
      
        var log = console.log;
      
      
      var result = parseFunctions[startRule]();
      
      /*
       * The parser is now in one of the following three states:
       *
       * 1. The parser successfully parsed the whole input.
       *
       *    - |result !== null|
       *    - |pos === input.length|
       *    - |rightmostFailuresExpected| may or may not contain something
       *
       * 2. The parser successfully parsed only a part of the input.
       *
       *    - |result !== null|
       *    - |pos < input.length|
       *    - |rightmostFailuresExpected| may or may not contain something
       *
       * 3. The parser did not successfully parse any part of the input.
       *
       *   - |result === null|
       *   - |pos === 0|
       *   - |rightmostFailuresExpected| contains at least one failure
       *
       * All code following this comment (including called functions) must
       * handle these states.
       */
      if (result === null || pos !== input.length) {
        var offset = Math.max(pos, rightmostFailuresPos);
        var found = offset < input.length ? input.charAt(offset) : null;
        var errorPosition = computeErrorPosition();
        
        throw new this.SyntaxError(
          cleanupExpected(rightmostFailuresExpected),
          found,
          offset,
          errorPosition.line,
          errorPosition.column
        );
      }
      
      return result;
    },
    
    /* Returns the parser source code. */
    toSource: function() { return this._source; }
  };
  
  /* Thrown when a parser encounters a syntax error. */
  
  result.SyntaxError = function(expected, found, offset, line, column) {
    function buildMessage(expected, found) {
      var expectedHumanized, foundHumanized;
      
      switch (expected.length) {
        case 0:
          expectedHumanized = "end of input";
          break;
        case 1:
          expectedHumanized = expected[0];
          break;
        default:
          expectedHumanized = expected.slice(0, expected.length - 1).join(", ")
            + " or "
            + expected[expected.length - 1];
      }
      
      foundHumanized = found ? quote(found) : "end of input";
      
      return "Expected " + expectedHumanized + " but " + foundHumanized + " found.";
    }
    
    this.name = "SyntaxError";
    this.expected = expected;
    this.found = found;
    this.message = buildMessage(expected, found);
    this.offset = offset;
    this.line = line;
    this.column = column;
  };
  
  result.SyntaxError.prototype = Error.prototype;
  
  return result;
})();
var parser = require('./inertia/grammar');
var UglifyJS = require("uglify-js");
var fs = require('fs');
var es = require('escodegen');
var util = require('util');
var program = require('commander');

program
    .version('0.3.0')
    .usage('[options] <file...>')
    .option('-t, --ast', 'Print the AST')
    .option('-o, --output [file]', 'Redirect output to file')
    .option('-c, --compress', 'Minify with uglify')
    .parse(process.argv);

if (program.args.length === 0) {
    console.log('Missing file.');
    process.exit(1);
}

var input, ast, js, lib;

input = program.args[0];
input = fs.readFileSync(input, 'utf8');

lib = fs.readFileSync('./inertia/lib.js', 'utf8');

ast = parser.parse(input);

if (program.ast) {
    console.log(JSON.stringify(ast, null, 4));
    process.exit(0);
}

js = lib + es.generate(ast);

if (program.compress) {
    js = UglifyJS.minify(js, {fromString: true}).code;
}

if (program.output) {
    fs.writeFileSync(program.output, js, 'utf8');
    process.exit(0);
}

console.log(js);
